load_module /root/debuild/nginx-1.15.5/debian/debuild-module-lua/nginx-1.15.5/debian/nginx-module-lua/usr/lib/nginx/modules/ngx_http_lua_module.so;
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;
events {
  worker_connections 128;
}
http {
  lua_package_path '~/lua/?.lua;;';
  access_log /var/log/nginx/access.log combined;
  resolver 8.8.8.8;
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;
  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  # cache for JWKs
  lua_shared_dict jwks 1m;
  # NB: if you have "lua_code_cache off;", use:
  # set $session_secret xxxxxxxxxxxxxxxxxxx;
  # see: https://github.com/bungle/lua-resty-session#notes-about-turning-lua-code-cache-off
  server {
    listen 80;
    location /nginx {
      default_type text/plain;
      return 200 "the NGINX server is worksing at $request_uri";
    }

    location / {
      access_by_lua_block {
          local opts = {
             redirect_uri = "/auth_callback",
             discovery = "https://project.com/.well-known/openid-configuration",
             client_id = "client_id",
             client_secret = "client_secret",
             scope = "openid email profile",
          }
          local res, err = require("resty.openidc").authenticate(opts)
          if err then
            ngx.status = 500
            ngx.say(err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end
          ngx.req.set_header("X-access_token", res.access_token)
      }

      add_header Set-Cookie "x-access-token=$http_x_access_token;Path=/";

      proxy_pass http://docker.for.mac.localhost:9999/;
    }
  }
}
